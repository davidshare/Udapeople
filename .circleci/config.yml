version: 2.1


# Use a package of configuration called an orb.
orbs:
  slack: circleci/slack@4.10.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      workflow_id:
        type: string
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name udapeople-<< parameters.workflow_id >>-${CIRCLE_WORKFLOW_ID:0:5}

  install_awscli:
    description: Install AWS CLI
    steps:
      - run:
          name: Install AWS CLI v2
          command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            ./aws/install
          when: on_fail
          
  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      workflow_id:
        type: string     
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            SUCCESS = 1
            if(( $SUCCESS==1 )); 
            then
            #  cd ~/project/backend
            #  npm install
            #  Add revert code here. You can find this in the Getting Started section.
            fi
  
  # Source: https://discuss.circleci.com/t/leveraging-circleci-api-to-include-build-logs-in-slack-notifications/39111
  get_failure_logs:
    description: get a part of the logs from failed builds and send it as a message
    steps:
      - run:
          when: on_fail
          name: Generate last log lines for slack message
          command: |
            API_URL=$(echo $CIRCLE_BUILD_URL | cut -d/ -f4-7)
            FAILED_STEP=$(curl "https://circleci.com/api/v1.1/project/${API_URL}?circle-token=${CIRCLE_API_TOKEN}" | jq '.steps | .[] | flatten | map(select(.status? == "failed")) | .[] | {allocation_id, step}')

            ALLOCATION_ID=$(echo "${FAILED_STEP}" | jq -r '.allocation_id')
            STEP=$(echo "${FAILED_STEP}" | jq -r '.step')
            curl -o slack_response.txt "https://circleci.com/api/v1.1/project/${API_URL}/output/${STEP}/0?file=true&allocation-id=${ALLOCATION_ID}&circle-token=$CIRCLE_API_TOKEN"
            sed -i 's/\r$//g' slack_response.txt
            SLACK_MESSAGE=$(cat slack_response.txt | tail -n 10 | sed '$!s/$/\\n/' | tr -d '\n')
            echo $SLACK_MESSAGE
            echo "export SLACK_MESSAGE='${SLACK_MESSAGE}'" >> $BASH_ENV

  slack_success_notification:
    parameters:
      message:
        type: string
    steps:
      - slack/notify:
          event: pass
          custom: |
            {
              "blocks": [
                {
                  "type": "divider"
                },
                {
                  "type": "header",
                  "text": {
                    "type": "plain_text",
                    "text": "Build succeeded :white_check_mark:",
                    "emoji": true
                  }
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "<< parameters.message >>"
                  }
                },
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "mrkdwn",
                      "text": "*Project*: \n$CIRCLE_PROJECT_REPONAME"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Job*: \n$CIRCLE_JOB"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Job*: \n${CIRCLE_JOB}"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Branch*: \n$CIRCLE_BRANCH"
                    }
                  ]
                },
                {
                  "type": "actions",
                  "elements": [
                    {
                      "type": "button",
                      "text": {
                        "type": "plain_text",
                        "text": "Click here to view job"
                      },
                      "style": "primary",
                      "url": "${CIRCLE_BUILD_URL}"
                    }
                  ]
                },
                {
                  "type": "divider"
                }
              ]
            }

  slack_error_notification:
    parameters:
      message:
        type: string
    steps:
      - get_failure_logs
      - slack/notify:
          event: fail
          custom: |
            {
              "blocks": [
                {
                  "type": "divider"
                },
                {
                  "type": "header",
                  "text": {
                    "type": "plain_text",
                    "text": "Build failed :warning:",
                    "emoji": true
                  }
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "<< parameters.message >> \n ```${SLACK_MESSAGE}```"
                  }
                },
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "mrkdwn",
                      "text": "*Project*: \n$CIRCLE_PROJECT_REPONAME"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Job*: \n$CIRCLE_JOB"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Job*: \n${CIRCLE_JOB}"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Branch*: \n$CIRCLE_BRANCH"
                    }
                  ]
                },
                {
                  "type": "actions",
                  "elements": [
                    {
                      "type": "button",
                      "text": {
                        "type": "plain_text",
                        "text": "Click here to view job"
                      },
                      "style": "danger",
                      "url": "${CIRCLE_BUILD_URL}"
                    }
                  ]
                },
                {
                  "type": "divider"
                }
              ]
            }
            
jobs:
  build-frontend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
      - slack_error_notification:
          message: "Sorry, the frontend build has failed"

  build-backend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
      - slack_error_notification:
          message: "Sorry, the backend build has failed"

  test-frontend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run: 
          command: |
            cd frontend
            npm install
            npm run test
      - slack_error_notification:
          message: "Sorry, the frontend test has failed"
                
  test-backend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run: 
          command: |
            cd backend
            npm install
            npm run test
      - slack_error_notification:
          message: "Sorry, the backend test has failed"
            
  scan-frontend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout 
      - restore_cache:
          keys: [frontend-build]
      - run: 
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical
      - slack_error_notification:
          message: "Sorry, the frontend scan has failed"

  scan-backend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run: 
          command: |
            cd backend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit fix --force
            npm audit --audit-level=critical
      - slack_error_notification:
          message: "Sorry, the backend scan has failed"

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: yum install -y tar gzip jq
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:5} \
              --parameter-overrides ID=${CIRCLE_WORKFLOW_ID:0:5} \
              --tags project=udapeople-backend
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:5} \
              --parameter-overrides ID=${CIRCLE_WORKFLOW_ID:0:5} \
              --tags project=udapeople-frontend
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=UdaPeople-backend-${CIRCLE_WORKFLOW_ID:0:5}" \
                'Name=instance-state-name,Values=running' \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text >> .circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: .
          paths:
            - ./.circleci/ansible/inventory.txt
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:5} 
      - slack_error_notification:
          message: "Sorry, the infrastructure could not be deployed."

  configure-infrastructure:
    environment:
      - ANSIBLE_HOST_KEY_CHECKING: False
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["0d:db:2c:31:a3:4c:be:2a:2d:31:9d:37:89:fa:f4:ed"] 
      - attach_workspace:
          at: ./
      - run:
          name: Install dependencies
          command: |
            pwd
            ls -al
            cat .circleci/ansible/inventory.txt
            apk add --update ansible
            apk add openssh
            apk add curl
      - run:
          name: Configure server
          command: |
            cd .circleci/ansible
            ansible-playbook -i inventory.txt configure-server.yml
      - install_awscli
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:5}     
      - slack_error_notification:
          message: "Sorry, the frontend build has failed"

  run-migrations:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install
            npm run migrations > migrations_dump.txt
      - run:
          name: Send migration results to https://keyvalue.immanuel.co
          command: |
            cat ~/project/backend/migrations_dump.txt
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
              curl -H "Content-Type: text/plain" -H "Content-Length: 0" -X POST https://keyvalue.immanuel.co/api/KeyVal/UpdateValue/38ppmwpv/1/migration_${CIRCLE_WORKFLOW_ID:0:5}
            fi

    # Here's where you will add some code to rollback on failure 
      - slack_error_notification:
          message: "Sorry, the migration has failed"

  deploy-frontend:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            apk add --update nodejs npm tar gzip jq curl
            pip3 install awscli
      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances...............)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:5}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:5} --recursive
      # Here's where you will add some code to rollback on failure
      - slack_error_notification:
          message: "Sorry, the frontend deployment failed"
      - slack_success_notification:
          message: "Hurray!!! the frontend deployment was a success"

  deploy-backend:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["0d:db:2c:31:a3:4c:be:2a:2d:31:9d:37:89:fa:f4:ed"] 
      - attach_workspace:
          at: ./
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible nodejs npm openssh tar gzip
      - run:
          name: Deploy backend
          command: |
            cd backend
            npm i
            npm run build
            cd ..
            # Zip the directory
            tar -C backend -czvf artifact.tar.gz .
            cd .circleci/ansible
            echo "Contents  of the inventory.txt file is -------"
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml
      # Here's where you will add some code to rollback on failure 
      - slack_error_notification:
          message: "Sorry, the frontend build has failed"

  smoke-test:
    docker:
      - image: alpine/curl:3.14
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            # your code here
      - run:
          name: Get backend url
          command: |
            # your code here
      - run:
          name: Backend smoke test.
          command: |
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
            if curl "${API_URL}/api/status" | grep "ok"
            then
                return 0
            else
                return 1
            fi
      - run:
          name: Frontend smoke test.
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:5}.s3-website-us-east-1.amazonaws.com/#/employees"            
            echo ${URL} 
            if curl -s ${URL} | grep "Welcome"
            then
                # Change this to 0 after the job fails
              return 1
            else
              return 1
            fi
      # Here's where you will add some code to rollback on failure
      - slack_error_notification:
          message: "Sorry, the frontend build has failed"

  cloudfront-update:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            # your code here
      - run:
          name: Update cloudfront distribution
          command: |
            # your code here
      # Here's where you will add some code to rollback on failure
      - slack_error_notification:
          message: "Sorry, the frontend build has failed"

  cleanup:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Get old stack workflow id
          command: |
            # your code here
            export OldWorkflowID="the id here"
            export STACKS=[] #put the list of stacks here
      - run:
          name: Remove old stacks and files
          command: |
            if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
            then
              # your code here
            fi
      - slack_error_notification:
          message: "Sorry, the frontend build has failed"

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [master]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          requires: [smoke-test]
      - cleanup:
          requires: [cloudfront-update]