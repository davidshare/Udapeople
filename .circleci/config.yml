version: 2.1


# Use a package of configuration called an orb.
orbs:
  slack: circleci/slack@4.10.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      workflow_id:
        type: string
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name udapeople-<< parameters.workflow_id >>-${CIRCLE_WORKFLOW_ID:0:5}
            exit 1

  install_awscli:
    description: Install AWS CLI
    steps:
      - run:
          name: Install AWS CLI v2
          command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
          when: on_fail
          
  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      workflow_id:
        type: string     
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            SUCCESS = 1
            if(( $SUCCESS==1 )); 
            then
            #  cd ~/project/backend
            #  npm install
            #  Add revert code here. You can find this in the Getting Started section.
              exit 1
            fi

  slack_success_notification:
    parameters:
      service:
        type: string
      message:
        type: string
    steps:
      - slack/notify:
          event: pass
          custom: |
            {
              "blocks": [
                {
                  "type": "divider"
                },
                {
                  "type": "header",
                  "text": {
                    "type": "plain_text",
                    "text": "Build succeeded :white_check_mark:",
                    "emoji": true
                  }
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "<< parameters.message >>"
                  }
                },
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "mrkdwn",
                      "text": "*Project*: \n$CIRCLE_PROJECT_REPONAME"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Service*: \n<< parameters.service >>"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Job*: \n${CIRCLE_JOB}"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Branch*: \n$CIRCLE_BRANCH"
                    }
                  ]
                },
                {
                  "type": "actions",
                  "elements": [
                    {
                      "type": "button",
                      "text": {
                        "type": "plain_text",
                        "text": "Click here to view job"
                      },
                      "style": "primary",
                      "url": "https://${CIRCLE_BUILD_URL}"
                    }
                  ]
                },
                {
                  "type": "divider"
                }
              ]
            }

  slack_error_notification:
    parameters:
      service:
        type: string
      message:
        type: string
    steps:
      - slack/notify:
          event: fail
          custom: |
            {
              "blocks": [
                {
                  "type": "divider"
                },
                {
                  "type": "header",
                  "text": {
                    "type": "plain_text",
                    "text": "Build failed :alert:",
                    "emoji": true
                  }
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "<< parameters.message >>"
                  }
                },
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "mrkdwn",
                      "text": "*Project*: \n$CIRCLE_PROJECT_REPONAME"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Service*: \n<< parameters.service >>"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Job*: \n${CIRCLE_JOB}"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Branch*: \n$CIRCLE_BRANCH"
                    }
                  ]
                },
                {
                  "type": "actions",
                  "elements": [
                    {
                      "type": "button",
                      "text": {
                        "type": "plain_text",
                        "text": "Click here to view job"
                      },
                      "style": "primary",
                      "url": "https://${CIRCLE_BUILD_URL}"
                    }
                  ]
                },
                {
                  "type": "divider"
                }
              ]
            }
            
jobs:
  build-frontend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
      - slack_error_notification:
          service: "frontend"
          message: "Sorry, the frontend build has failed"
      - slack_success_notification:
          service: "frontend"
          message: "Hurray!!! the frontend build was a success"

  build-backend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
      - slack_error_notification:
          service: "backend"
          message: "Sorry, the backend build has failed"
      - slack_success_notification:
          service: "backend"
          message: "Hurray!!! the backend build was a success"

  test-frontend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run: 
          command: |
            cd frontend
            npm installs
            npm run test
      - slack_error_notification:
          service: "frontend"
          message: "Sorry, the frontend test has failed"
      - slack_success_notification:
          service: "frontend"
          message: "Hurray!!! the frontend test was a success"
                
  test-backend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run: 
          command: |
            cd backend
            npm install
            npm run test
      - slack_error_notification:
          service: "frontend"
          message: "Sorry, the frontend build has failed"
      - slack_success_notification:
          service: "frontend"
          message: "Hurray!!! the frontend build was a success"
            
  scan-frontend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout 
      - restore_cache:
          keys: [frontend-build]
      - run: 
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical
      - slack_error_notification:
          service: "frontend"
          message: "Sorry, the frontend build has failed"
      - slack_success_notification:
          service: "frontend"
          message: "Hurray!!! the frontend build was a success"

  scan-backend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run: 
          command: |
            cd backend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit fix --force
            npm audit --audit-level=critical
      - slack_error_notification:
          service: "frontend"
          message: "Sorry, the frontend build has failed"
      - slack_success_notification:
          service: "frontend"
          message: "Hurray!!! the frontend build was a success"

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople-backend \
              --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:5} \
              --parameter-overrides ID=${CIRCLE_WORKFLOW_ID:0:5}  
              exit 1
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              #--tags project=your-tag \
              # --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:5} \
              # --parameter-overrides ID=${CIRCLE_WORKFLOW_ID:0:5}  
              exit 1
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            aws ec2 describe-instances \
              --filters "Name=tag:project,Values=udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:5}" \
                'Name=instance-state-name,Values=running' \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text >> inventory.txt
            exit 1
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      # Here's where you will add some code to rollback on failure 
      - slack_error_notification:
          service: "frontend"
          message: "Sorry, the frontend build has failed"
      - slack_success_notification:
          service: "frontend"
          message: "Hurray!!! the frontend build was a success"

  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["0d:db:2c:31:a3:4c:be:2a:2d:31:9d:37:89:fa:f4:ed"] 
      - attach_workspace:
          at: ./
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
            apk add openssh
            exit 1
      - run:
          name: Configure server
          command: |
            ansible-playbook -i inventory main.yml
            exit 1
      - install_awscli
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:5}     
      - slack_error_notification:
          service: "frontend"
          message: "Sorry, the frontend build has failed"
      - slack_success_notification:
          service: "frontend"
          message: "Hurray!!! the frontend build was a success"

  run-migrations:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - run:
          name: Run migrations
          command: |
            # Your code here
            exit 1
      - run:
          name: Send migration results to memstash
          command: |
            # Your code here
            exit 1
    # Here's where you will add some code to rollback on failure 
      - slack_error_notification:
          service: "frontend"
          message: "Sorry, the frontend build has failed"
      - slack_success_notification:
          service: "frontend"
          message: "Hurray!!! the frontend build was a success"

  deploy-frontend:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            # your code here
      - run:
          name: Get backend url
          command: |
            # your code here
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
      - run:
          name: Deploy frontend objects
          command: |
            # your code here
      # Here's where you will add some code to rollback on failure
      - slack_error_notification:
          service: "frontend"
          message: "Sorry, the frontend build has failed"
      - slack_success_notification:
          service: "frontend"
          message: "Hurray!!! the frontend build was a success"
  deploy-backend:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["0d:db:2c:31:a3:4c:be:2a:2d:31:9d:37:89:fa:f4:ed"] 
      - attach_workspace:
          at: ./
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
            apk add openssh
            exit 1
      - run:
          name: Deploy backend
          command: |
            cd backend
            npm i
            npm run build
            cd ..
            # Zip the directory
            tar -C backend -czvf artifact.tar.gz .
            cd .circleci/ansible
            echo "Contents  of the inventory.txt file is -------"
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml
      # Here's where you will add some code to rollback on failure 
      - slack_error_notification:
          service: "frontend"
          message: "Sorry, the frontend build has failed"
      - slack_success_notification:
          service: "frontend"
          message: "Hurray!!! the frontend build was a success"

  smoke-test:
    docker:
      - image: alpine/curl:3.14
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            # your code here
      - run:
          name: Get backend url
          command: |
            # your code here
      - run:
          name: Backend smoke test.
          command: |
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
            if curl "${API_URL}/api/status" | grep "ok"
            then
                return 0
            else
                return 1
            fi
      - run:
          name: Frontend smoke test.
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"            
            echo ${URL} 
            if curl -s ${URL} | grep "Welcome"
            then
                # Change this to 0 after the job fails
              return 1
            else
              return 1
            fi
      # Here's where you will add some code to rollback on failure
      - slack_error_notification:
          service: "frontend"
          message: "Sorry, the frontend build has failed"
      - slack_success_notification:
          service: "frontend"
          message: "Hurray!!! the frontend build was a success"

  cloudfront-update:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            # your code here
      - run:
          name: Update cloudfront distribution
          command: |
            # your code here
      # Here's where you will add some code to rollback on failure
      - slack_error_notification:
          service: "frontend"
          message: "Sorry, the frontend build has failed"
      - slack_success_notification:
          service: "frontend"
          message: "Hurray!!! the frontend build was a success"

  cleanup:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Get old stack workflow id
          command: |
            # your code here
            export OldWorkflowID="the id here"
            export STACKS=[] #put the list of stacks here
      - run:
          name: Remove old stacks and files
          command: |
            if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
            then
              # your code here
            fi
      - slack_error_notification:
          service: "frontend"
          message: "Sorry, the frontend build has failed"
      - slack_success_notification:
          service: "frontend"
          message: "Hurray!!! the frontend build was a success"

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [test-feature-branch]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          requires: [smoke-test]
      - cleanup:
          requires: [cloudfront-update]